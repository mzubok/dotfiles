# Local/private config
[include]

    path = ~/.gitconfig.local

[alias]

    # Staging
    a = add
    aa = add --all
    all = add --all

    # Branch
    br = branch
    branch-name = rev-parse --abbrev-ref HEAD
    branch-diff = diff master...HEAD
    branch-files = "!git diff master...HEAD --name-status | sed '/^D/d ; s/^.\\s\\+//'"

    # Commit
    c = commit
    ca = commit -a
    cm = commit -m
    cal = !git add -A && git commit         # Commit all changes
    cam = commit -am
    cne = commit --no-edit
    amend = commit --amend -C HEAD
    amend-all = !git add --all && git commit --amend --reuse-message=HEAD

    # Clone
    cl = clone --recursive                  # Clone a repository including all submodules
    sclone = clone --depth=1

    # Checkout
    co = checkout
    cb = checkout -b

    # Cherry-pick
    cp = cherry-pick

    # Diff
    d = diff --color-words
    dc = diff --cached
    # Show the diff between the latest commit and the current state
    df = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Merge
    m = merge

    # Pull
    up = !sh -c 'git pull --rebase --prune && git log --pretty=format:\"%Cred%ae %Creset- %C(yellow)%s %Creset(%ar)\" HEAD@{1}.. | sed \"s/^/  /\"'
    plom = pull origin master
    plum = pull upstream master
    preb = !git fetch upstream && git rebase upstream/master

    # Push
    p = push
    pom = push origin master
    poh = push origin head

    # Stash
    st = stash
    stp = stash pop

    # Status/Logging
    s = status
    ss = status -sb                              # View the current working tree status using the short format
    hist = log --graph --pretty=custom           # Show custom graph
    l = log --pretty=custom                      # Show custom log
    ll = log --stat --abbrev-commit
    lc = shortlog --summary --numbered           # List contributors
    lf = log --pretty=fuller
    latest = for-each-ref --count=10 --sort=-committerdate --format='%(committerdate:short) %(refname:short)'

    # Reset
    unstage = reset HEAD --                      # Mixed reset (affects HEAD and Index)
    undo = reset --soft HEAD~1                   # Undo last commit (affects HEAD only)
    reset = reset --hard HEAD~1                  # Remove last commit (from HEAD, Index and Working Dir)
    scrub = !git reset --hard && git clean -fd

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # List aliases
    aliases = config --get-regexp alias

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Remove the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=custom --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=custom --decorate --date=short --grep=$1; }; f"

    # Remove branches that have already been merged with master
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # List contributors with number of commits
    contributors = shortlog --summary --numbered

    # Misc
    publish = "!git push --set-upstream origin $(git branch-name)"

    # Change permissions
    x = "git update-index --chmod=+x $1"
    unx = "git update-index --chmod=-x $1"

    # Merge GitHub pull request on top of the current branch or,
    # if a branch name is specified, on top of the specified branch
    mpr = "!f() { \
        declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
        declare branch=\"${2:-$currentBranch}\"; \
        if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
            git fetch origin refs/pull/$1/head:pr/$1 && \
            git checkout -B $branch && \
            git rebase $branch pr/$1 && \
            git checkout -B $branch && \
            git merge pr/$1 && \
            git branch -D pr/$1 && \
            git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
        fi \
    }; f"

    # List remote branches
    lrb = "!f() { \
        remote="${1:-origin}"; \
        git ls-remote --heads "$remote"; \
    }; f"

[apply]

    # Detect whitespace errors when applying a patch
    whitespace = fix

[core]

    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes

    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on macOS
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Git and the Umlaut problem on Mac OS X
    # Prevent showing files which filenames contains umlauts as untracked
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = true

[color]

    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
    ui = auto

[color "branch"]

    current = green reverse
    local = green
    remote = yellow

[color "diff"]

    meta = yellow bold
    frag = magenta bold # line info
    old = red # deletions
    new = green # additions

[color "diff-highlight"]

    oldNormal = red bold
    oldHighlight = "red bold 52"
    newNormal = "green bold"
    newHighlight = "green bold 22"

[color "status"]

    added = yellow
    changed = green
    untracked = cyan

[commit]

    # https://help.github.com/articles/signing-commits-using-gpg/
    # gpgsign = true

[diff]

    # Detect copies as well as renames
    renames = copies
    # Enable an experimental heuristic that shifts the hunk boundary in an
    # attempt to make the resulting patch easier to read.
    indentHeuristic = true

[diff "bin"]

    # Use `hexdump` to diff binary files
    textconv = hexdump -v -C

[difftool "sourcetree"]

    cmd = opendiff \"$LOCAL\" \"$REMOTE\"
    path =

[mergetool "sourcetree"]

    cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
    trustExitCode = true

[difftool "Kaleidoscope"]

    cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"

[mergetool "Kaleidoscope"]

    cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
    trustexitcode = true

[difftool]

    prompt = false

[mergetool]

    prompt = false

[help]

    # Automatically correct and execute mistyped commands
    autocorrect = 1

[merge]

    # Include summaries of merged commits in newly created merge commit messages
    log = true

[push]

    # Push easily http://stackoverflow.com/a/23918418/89484
    # push the current branch to update a branch with the same name on the receiving end.
    # Works in both central and non-central workflows.
    default = simple
    # do not `git push` push relevant annotated tags when pushing branches out.
    followTags = false

[pull]

    rebase = true

[fetch]

    prune = true

[pager]

    # Insanely beautiful diffs ==> brew install diff-so-fancy
    diff = diff-so-fancy | less --tabs=4 -RFX
    show = diff-so-fancy | less --tabs=4 -RFX

[pretty]

    custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
    #                     │        │            │            │             └─ author name
    #                     │        │            │            └─ message
    #                     │        │            └─ date (relative)
    #                     │        └─ decorations (branch, heads or tags)
    #                     └─ hash (abbreviated)

# URL shorthands

[credential]

    helper = osxkeychain

[url "git@github.com:"]

    insteadOf = "gh:"
    insteadOf = "git://github.com"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"
    pushInsteadOf = "https://github.com/"

[url "git://github.com/"]

    insteadOf = "github:"

[url "git@gist.github.com:"]

    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"
    pushInsteadOf = "https://gist.github.com/"

[url "git://gist.github.com/"]

    insteadOf = "gist:"

[filter "lfs"]

    clean = git lfs clean %f
    smudge = git lfs smudge %f
    required = true
